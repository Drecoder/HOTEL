services:
  # -------------------------------
  # 1Ô∏è‚É£ PostgreSQL
  # -------------------------------
  postgres:
    image: postgres:15
    container_name: hotel-ops-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: hotel
    env_file:
      - .env
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./apps/db-init/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5
      start_period: 5s

  # -------------------------------
  # 2Ô∏è‚É£ Redis
  # -------------------------------
  redis:
    image: redis:7
    container_name: hotel-ops-redis
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5
      start_period: 5s

  # -------------------------------
  # 3Ô∏è‚É£ Zookeeper
  # -------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: hotel-ops-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 5s
      retries: 10
      start_period: 10s

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: hotel-ops-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"   # Host can connect via localhost:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: ["CMD-SHELL", "echo > /dev/tcp/localhost/9092"]
      interval: 5s
      retries: 10
      start_period: 10s


  # -------------------------------
  # 5Ô∏è‚É£ Backend (FIXED: Removed Nx development command)
  # -------------------------------
  # backend:
  #   build:
  #     context: .
  #     dockerfile: ./apps/backend/Dockerfile
  #   container_name: hotel-ops-backend
  #   env_file:
  #     - .env
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #   environment:
  #     NODE_ENV: production # Change to production since we are running the compiled code
  #     DB_USER: postgres
  #     DB_PASSWORD: postgres
  #     DB_NAME: hotel
  #     DB_PORT: 5432
  #     DB_HOST: postgres
  #     KAFKA_BROKER: kafka:9092
  #     REDIS_HOST: redis
  #     REDIS_PORT: 6379
  #   ports:
  #     - "8080:8080"
    # FIX 1: Removed the problematic 'command: npx nx serve backend' line.
    # The container will now use the Dockerfile's CMD: ["node", "dist/apps/backend/main.js"]
    # healthcheck: # FIX 2: Added healthcheck so the frontend can wait for it
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
    #   interval: 5s
    #   retries: 10
    #   start_period: 10s
    # restart: unless-stopped

  # -------------------------------
  # 6Ô∏è‚É£ Frontend
  # -------------------------------
  # frontend:
  #   build:
  #     context: .
  #     dockerfile: ./apps/frontend/Dockerfile
  #   container_name: hotel-ops-frontend
  #   # depends_on:
  #     # backend:
  #     #   condition: service_healthy # FIX 3: Wait until the backend is actually healthy
  #   ports:
  #     - "3000:5173"
    # restart: unless-stopped

# -------------------------------
# üß± Volumes
# -------------------------------
volumes:
  postgres-data:
